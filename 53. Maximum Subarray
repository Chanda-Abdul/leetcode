# 53. Maximum Subarray

Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up: If you have figured out the `O(n)` solution, try coding another solution using the divide and conquer approach, which is more subtle.

#

### Example 1:

#### Input: 
`nums = [-2,1,-3,4,-1,2,1,-5,4]`
#### Output: 
`6`
#### Explanation: 
`[4,-1,2,1]` has the largest `sum = 6`.
### Example 2:
#### Input: 
`nums = [1]`
#### Output: 
`1`
### Example 3:
#### Input: `nums = [0]`
#### Output: `0`
### Example 4:
#### Input: 
`nums = [-1]`
#### Output: 
`-1`
### Example 5:
#### Input: 
`nums = [-2147483647]`
#### Output: 
`-2147483647`
 

### Constraints:

`1 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`

## My Solution 
```
const maxSubArray = function(nums) {
    // if(nums.length === 1) {
    //   return nums[0]
    // }
    // else {
    let maxSum = -Infinity
  
    //Linear Solution
    let currSum = -Infinity
    
    for(let i = 0; i < nums.length; i++) {
      currSum = Math.max(0, currSum)
      currSum += nums[i]
      maxSum = Math.max(maxSum, currSum)
    }
    return maxSum
    // }
}
```

### Input 
```
maxSubArray([-2,1,-3,4,-1,2,1,-5,4])
maxSubArray([1])
maxSubArray([0])
maxSubArray([-1])
maxSubArray([-2147483647])
```

### Output
```
6
1
0
-1
-2147483647
```
